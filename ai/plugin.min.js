tinymce.PluginManager.add('ai', function(editor, url) {
  // Register a custom icon for the send button.
  editor.ui.registry.addIcon('aiSendIcon', '<svg width="24" height="24" focusable="false"><path fill-rule="evenodd" clip-rule="evenodd" d="m13.3 22 7-18.3-18.3 7L9 15l4.3 7ZM18 6.8l-.7-.7L9.4 14l.7.7L18 6.8Z"></path></svg>');

  // Register a custom icon for the AI button.
  editor.ui.registry.addIcon('aiIcon', '<svg width="24" height="24" viewBox="0 0 24 24"><text x="4" y="16" font-size="16" fill="currentColor">AI</text></svg>');



  /* ------- Helper: inject CSS ------- */ 
  function injectStyle(id, css) {
    if (document.getElementById(id)) return;
    var s = document.createElement('style');
    s.id = id;
    s.appendChild(document.createTextNode(css));
    document.head.appendChild(s);
  }
  var aiCss = `
  .tox-ai-btn .tox-icon {
    display: inline-flex !important;
    align-items: center;
    justify-content: center;
    padding: 3px !important;
    border-radius: 8px !important;
    background: conic-gradient(from 0deg, #ff3b30, #ff9500, #ffcc00, #34c759, #0aa1ff, #5856d6, #ff2d55, #ff3b30) !important;
    transition: transform 0.12s ease, box-shadow 0.12s ease;
    box-shadow: 0 1px 2px rgba(0,0,0,0.06) inset;
  }
  .tox-ai-btn:hover .tox-icon { transform: scale(1.04); box-shadow: 0 2px 6px rgba(0,0,0,0.12) inset; }
  .tox-ai-btn .tox-icon svg { display: block !important; border-radius: 6px !important; background: white !important; padding: 4px !important; }
  `;

  // inject immediately and also after SkinLoaded as a fallback
  injectStyle('tinymce-ai-button', aiCss);
  editor.on('SkinLoaded', function() { injectStyle('tinymce-ai-button', aiCss); });


  // Helper: create preview iframe with local CSS files (preview only)
  function createPreviewIframe(htmlContent, cssHrefs) {
    var iframe = document.createElement('iframe');
    iframe.style.width = '100%';
    iframe.style.height = '360px';
    iframe.style.border = '0';
    // sandbox helps isolate preview from host page
    iframe.setAttribute('sandbox', 'allow-same-origin allow-scripts');

    var headLinks = '';
    for (var i = 0; i < cssHrefs.length; i++) {
      headLinks += '<link rel="stylesheet" href="' + cssHrefs[i] + '">';
    }

    // Use srcdoc so we can inject local CSS just for preview
    var src = '<!doctype html><html><head><meta charset="utf-8">' + headLinks + '</head><body>' + htmlContent + '</body></html>';
    try {
      iframe.srcdoc = src;
    } catch (e) {
      // Fallback for older browsers: write into the iframe document
      document.body.appendChild(iframe);
      var idoc = iframe.contentWindow.document;
      idoc.open();
      idoc.write(src);
      idoc.close();
    }

    return iframe;
  }

  // -----------------------------
  // AI Assistant Dialog Command
  // -----------------------------
  editor.addCommand('AIAssistant', function() {
    // Store current selection and content state
    var currentSelection = editor.selection.getContent();
    var hasSelection = currentSelection.length > 0;
    var selectionBookmark = editor.selection.getBookmark();
    var aiGeneratedResult = '';
    // Define the dialog configuration.
    var dialogConfig = {
      title: 'Hugging Face',
      body: {
        type: 'panel',
        items: [
          {
            type: 'htmlpanel',
            html: '<div style="display:flex;justify-content:flex-end;align-items:baseline;gap:8px;padding-bottom:6px;">' +
                  '<small style="color:#666;font-size:12px;margin-top:-1rem;">Beta</small>' +
                  '</div>'
},

          {
            type: 'textarea',
            name: 'aiPrompt',
            label: 'Enter your instructions',
            placeholder: 'What do you need?'
          },
          {
            type: 'htmlpanel',
            name: 'selectionInfo',
            html: '<div style="padding: 8px; background: #f0f0f0; border-radius: 4px; margin-bottom: 10px; font-size: 12px;">' +
                  (hasSelection ? 
                   '✓ Selected content will be modified' : 
                   '✓ The entire document will be modified') +
                  '</div>'
          },
          {
            type: 'htmlpanel',
            name: 'aiResultVisual',
            html: '<div id="ai-preview-container" style="min-height: 200px; border: 1px solid #ddd; border-radius: 4px; padding: 20px; background: #f9f9f9; text-align: center; color: #666;">' +
                  '<div style="margin-bottom: 15px;">Generated content will appear here</div>' +
                  '<div>🤖</div>' +
                  '</div>'
          }
        ]
      },
      buttons: [
        {
          type: 'custom',
          name: 'generate',
          icon: 'aiSendIcon',
          text: 'Generate',
          primary: true
        },
        {
          type: 'custom',
          name: 'apply',
          text: 'Apply',
          disabled: true
        },
        {
          type: 'cancel',
          text: 'Cancel'
        }
      ],
      initialData: {
        mode: 'html',
        aiPrompt: '',
        hasSelection: hasSelection,
        selectionBookmark: selectionBookmark,
        aiResult: ''
      },
      onAction: function(api, details) {
        var data = api.getData();
        
        if (details.name === 'generate') {
          var prompt = data.aiPrompt || '';
          var currentSelection = editor.selection.getContent();
          var hasSelectionNow = currentSelection.length > 0;
            
          // Determine what content to send to AI
          var contentToSend = hasSelectionNow ? currentSelection : editor.getContent();

          if (!prompt.trim()) {
            editor.windowManager.alert('Please enter instructions for the AI.');
            return;
          }

          // Show loading animation - directly update the DOM
          var dialogEl = document.querySelector('.tox-dialog');
          var previewContainer = dialogEl ? dialogEl.querySelector('#ai-preview-container') : null;
          if (previewContainer) {
            previewContainer.innerHTML = 
              '<div style="text-align: center; padding: 40px 20px; color: #666;">' +
              '<div style="display: inline-block; width: 40px; height: 40px; border: 4px solid #f3f3f3; border-top: 4px solid #3498db; border-radius: 50%; animation: spin 1s linear infinite; margin-bottom: 20px;"></div>' +
              '<div style="font-size: 16px; font-weight: bold; margin-bottom: 10px;">Thinking...</div>' +
              '<div style="font-size: 12px;">Please wait</div>' +
              '</div>' +
              '<style>' +
              '@keyframes spin {' +
              '  0% { transform: rotate(0deg); }' +
              '  100% { transform: rotate(360deg); }' +
              '}' +
              '</style>';
          }
          
          api.disable('generate'); // avoid double clicks

          // Store current state for apply action
          var currentBookmark = editor.selection.getBookmark();
          api.setData({
            hasSelection: hasSelectionNow,
            selectionBookmark: currentBookmark,
            contentToSend: contentToSend
          });

          // Send to your server proxy
          fetch('/api/hf-proxy.php', { // ! ! ! ! HF-PROXY.PHP PATH ! ! ! !
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              instruction: prompt,
              content: contentToSend,
              isFullDocument: !hasSelectionNow,
              model: 'google/flan-t5-large'
            })
          })
          .then(function(resp) {
            if (!resp.ok) throw new Error('Server error: ' + resp.status);
            return resp.json();
          })
          .then(function(res) {
            console.log("AI raw response:", res);
            
            if (res && res.modifiedContent) {
              // Store the raw result for applying
              aiGeneratedResult = res.modifiedContent;
              console.log("AI response:");
              console.log(res.modifiedContent);

              if (previewContainer) {
                // Create an iframe preview and inject local CSS files for preview only.
                previewContainer.innerHTML = '<div style="margin-bottom:10px;font-size:12px;color:#666;padding:8px;background:#e8f5e8;border-radius:4px;">✓ Content was generated — This is a preview only</div>';
                var previewContnet = res.modifiedContent.replace(/```html\s*/g, '').replace(/```/g, '');
                var cssFiles = ['css/bootstrap.min.css', 'css/all.min.css']; // CSS files to load into the preview iframe (add your CSS libs here)
                var iframe = createPreviewIframe(previewContnet, cssFiles);
                previewContainer.appendChild(iframe);

                // Also add a small helper note
                /*var note = document.createElement('div');
                note.style.marginTop = '8px';
                note.style.fontSize = '11px';
                note.style.color = '#666';
                note.textContent = 'Note: Styles are loaded for preview purposes only. They will be removed when inserted into the editor.';
                previewContainer.appendChild(note);*/
              }
              api.enable('apply');
            } else if (res && res.error) {
              editor.windowManager.alert('AI error: ' + res.error);
              if (previewContainer) {
                previewContainer.innerHTML = 
                  '<div style="text-align: center; padding: 40px 20px; color: #dc3545; background: #f8d7da; border-radius: 4px;">' +
                  '<div style="font-size: 16px; font-weight: bold; margin-bottom: 10px;">Error</div>' +
                  '<div style="font-size: 14px;">' + (res.error || 'An error occurred while communicating with the AI') + '</div>' +
                  '</div>';
              }
            } else {
              editor.windowManager.alert('Unexpected AI response');
              if (previewContainer) {
                previewContainer.innerHTML = 
                  '<div style="text-align: center; padding: 40px 20px; color: #856404; background: #fff3cd; border-radius: 4px;">' +
                  '<div style="font-size: 16px; font-weight: bold; margin-bottom: 10px;">Neočekávaná odpověď</div>' +
                  '<div style="font-size: 14px;">The AI returned an unexpected response</div>' +
                  '</div>';
              }
            }
          })
          .catch(function(err) {
            console.error("Fetch error:", err);
            editor.windowManager.alert('Error: ' + err.message);
            if (previewContainer) {
              previewContainer.innerHTML = 
                '<div style="text-align: center; padding: 40px 20px; color: #dc3545; background: #f8d7da; border-radius: 4px;">' +
                '<div style="font-size: 16px; font-weight: bold; margin-bottom: 10px;">Connection error</div>' +
                '<div style="font-size: 14px;">' + err.message + '</div>' +
                '</div>';
            }
          })
          .finally(function() {
            api.enable('generate');
          });
        } else if (details.name === 'apply') {
            var data = api.getData();
            var aiResult = aiGeneratedResult || 'Something went wrong :(';

            // Remove any stylesheet link tags that were only intended for the preview.
            // This ensures styles from css/bootstrap.min.css and css/all.min.css are NOT injected into the editor.
            aiResult = aiResult.replace(/<link\b[^>]*rel=["']?stylesheet["']?[^>]*>/gi, '');
            // Also remove base tags that could affect relative paths.
            aiResult = aiResult.replace(/<base\b[^>]*>/gi, '');

            // Remove code fence markers if any
            aiResult = aiResult.replace(/```html\s*/g, '').replace(/```/g, '');

            // Focus the editor first to ensure selection can be restored
            editor.focus();

            // Restore the original selection from when Generate was clicked
            try {
                if (data.selectionBookmark) {
                    editor.selection.moveToBookmark(data.selectionBookmark);
                }
            } catch (e) {
                console.error('Failed to restore selection:', e);
            }

            if (editor.selection.getContent().length > 0){
              var selected_html = editor.selection.getContent({ format: 'html' });
              aiResult = selected_html.replace(selected_html, aiResult);
              console.log("Content was selected — replacing selection with AI result.");
              editor.selection.setContent(aiResult);
            } else {
                console.log("No contect selected — replacing entire content.");
                // Replace entire content
                editor.setContent(aiResult);
            }
            api.close();
        }
      },
      onSubmit: function(api) {
        api.close();
      },
      onClose: function() {
        editor.focus();
      }
    };

    // Open the window with inline mode, attaching it to the toolbar,
    // and disable closing when clicking outside.
    editor.windowManager.open(dialogConfig, { inline: 'toolbar', closeOnClickOutside: false });
  });

  // Add a toolbar button for the AI Assistant.
  editor.ui.registry.addButton('ai', {
    icon: 'aiIcon',
    tooltip: 'AI Assistant',
    onAction: function() {
      editor.execCommand('AIAssistant');
    },

    onSetup: function(buttonApi) {
      var container = editor.getContainer();

      function addClassIfFound() {
        // scoped search inside this editor instance
        var btn = container.querySelector('.tox-tbtn[title="AI Assistant"], .tox-tbtn[aria-label="AI Assistant"]');
        if (btn && !btn.classList.contains('tox-ai-btn')) {
          btn.classList.add('tox-ai-btn');
        }
      }

      // Try immediately (toolbar may already be rendered)
      addClassIfFound();

      // Observe for re-renders (TinyMCE may re-create the toolbar)
      var mo = new MutationObserver(addClassIfFound);
      mo.observe(container, { childList: true, subtree: true });

      // cleanup when button removed
      return function() { mo.disconnect(); };
    }
  });


  // Also register a menu item so the plugin can be launched from the menu.
  editor.ui.registry.addMenuItem('ai', {
    text: 'AI Assistant',
    icon: 'robot',
    onAction: function() {
      editor.execCommand('AIAssistant');
    }
  });
});
